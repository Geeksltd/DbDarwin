<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PowerMapper</name>
    </assembly>
    <members>
        <member name="T:PowerMapper.ContainerExtensions">
            <summary>
            Extension methods for the <see cref="T:PowerMapper.IMappingContainer"/>.
            </summary>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.ClassicMap(PowerMapper.IMappingContainer,System.Object,System.Object)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <param name="container">The mapping container to execute with.</param>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.ClassicMap(PowerMapper.IMappingContainer,System.Object,System.Type)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <param name="container">The mapping container to execute with.</param>
            <param name="source">Source object to map from.</param>
            <param name="targetType">The type of target object.</param>
            <returns>Mapped target object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> or <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``1(PowerMapper.IMappingContainer,System.Object)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``2(PowerMapper.IMappingContainer,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Execute a mapping from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a new destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The element type of the source.</typeparam>
            <typeparam name="TTarget">The element type of the target.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="sources">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to map from.</param>
            <returns>The mapped target <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``2(PowerMapper.IMappingContainer,``0[])">
            <summary>
            Execute a mapping from the source array of <typeparamref name="TSource"/> to a new destination array of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source array.</typeparam>
            <typeparam name="TTarget">The element type of the target array.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="sources">The source array to map from.</param>
            <returns>The mapped target array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``2(PowerMapper.IMappingContainer,System.Collections.Generic.ICollection{``0})">
            <summary>
            Execute a mapping from the source collection of <typeparamref name="TSource"/> to a new destination collection of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source collection.</typeparam>
            <typeparam name="TTarget">The element type of the target collection.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``2(PowerMapper.IMappingContainer,System.Collections.Generic.IList{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.ContainerExtensions.Map``2(PowerMapper.IMappingContainer,System.Collections.Generic.List{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="container">The mapping container to execute with.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:PowerMapper.ConventionCollection">
            <summary>
            Represents a collection of convention objects that inherit from <see cref="T:PowerMapper.IConvention"/>.
            </summary>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Clear">
            <summary>
            Removes all conventions from the collection.
            </summary>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Add(PowerMapper.IConvention)">
            <summary>
            Adds a convention to the collection.
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Add(System.Action{PowerMapper.ConventionContext})">
            <summary>
            Adds a convention to the collection through a callback expression.
            </summary>
            <param name="action">The callback expression to apply the convention.</param>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Add``1">
            <summary>
            Adds a convention to the collection through the type of the convention.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Remove(System.Type)">
            <summary>
            Remove all the conventions with the specified type.
            </summary>
            <param name="conventionType">The specified type of the conventions to be removed.</param>
            <returns>The number of conventions removed from the <see cref="T:PowerMapper.ConventionCollection"/>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Remove``1">
            <summary>
            Remove all the conventions with the specified type.
            </summary>
            <typeparam name="T">The specified type of the conventions to be removed.</typeparam>
            <returns>The number of conventions removed from the <see cref="T:PowerMapper.ConventionCollection"/>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Remove(PowerMapper.IConvention)">
            <summary>
            Removes the first occurrence of a specific convention from the <see cref="T:PowerMapper.ConventionCollection"/>.
            </summary>
            <param name="convention">The convention to remove from the <see cref="T:PowerMapper.ConventionCollection"/>.</param>
            <returns><c>true</c> if <paramref name="convention"/> is successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Configure(System.Type)">
            <summary>
            Retrieves the first convention occurrence of the specified type for the configuration purpose.
            </summary>
            <param name="conventionType">The specified type to retrieve the convention.</param>
            <returns>The first convention occurrence of the specified type if there is any convention is the type of <paramref name="conventionType"/>, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Configure``1">
            <summary>
            Retrieves the first convention occurrence of the specified type for the configuration purpose.
            </summary>
            <typeparam name="T">The specified type to retrieve the convention.</typeparam>
            <returns>The first convention occurrence of the specified type if there is any convention is the type of <typeparamref name="T"/>, otherwise the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Contains(System.Type)">
            <summary>
            Determines whether any convention is the specified type.
            </summary>
            <param name="conventionType">The specified type to examine the conventions.</param>
            <returns><c>true</c> if any convention type is <paramref name="conventionType"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PowerMapper.ConventionCollection.Contains``1">
            <summary>
            Determines whether any convention is the specified type.
            </summary>
            <typeparam name="T">The specified type to examine the conventions.</typeparam>
            <returns><c>true</c> if any convention type is <typeparamref name="T"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:PowerMapper.ConventionContext">
            <summary>
            Describes the source and target of the mapping strategy for conventions.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:PowerMapper.ConventionContext.SourceType">
            <summary>
            Gets the source type to map from.
            </summary>
            <value>The type to map from.</value>
        </member>
        <member name="P:PowerMapper.ConventionContext.TargetType">
            <summary>
            Gets the target type to map to.
            </summary>
            <value>The target type to map to.</value>
        </member>
        <member name="P:PowerMapper.ConventionContext.SourceMembers">
            <summary>
            Gets a <see cref="T:PowerMapper.MappingMemberCollection"/> reprensents the members(properties and fields) of the <see cref="P:PowerMapper.ConventionContext.SourceType"/>.
            </summary>
            <value>The members of the <see cref="P:PowerMapper.ConventionContext.SourceType"/>.</value>
        </member>
        <member name="P:PowerMapper.ConventionContext.TargetMembers">
            <summary>
            Gets a <see cref="T:PowerMapper.MappingMemberCollection"/> reprensents the members(properties and fields) of the <see cref="P:PowerMapper.ConventionContext.TargetType"/>.
            </summary>
            <value>The members of the <see cref="P:PowerMapper.ConventionContext.TargetType"/>.</value>
        </member>
        <member name="P:PowerMapper.ConventionContext.Mappings">
            <summary>
            Gets a <see cref="T:PowerMapper.MemberMappingCollection"/> represents the mappings between source members and target members.
            </summary>
            <value>The mappings between source members and target members.</value>
        </member>
        <member name="P:PowerMapper.ConventionContext.Options">
            <summary>
            Gets the options that control the member matching algorithm.
            </summary>
            <value>The options that control the member matching algorithm.</value>
        </member>
        <member name="M:PowerMapper.ConventionContext.CreateWith(System.Func{System.Type,System.Object})">
            <summary>
            Supply a custom instantiation function for the target type.
            </summary>
            <param name="expression">Callback to create the target type.</param>
        </member>
        <member name="T:PowerMapper.IConvention">
            <summary>
            The interface the type mapping conventions.
            </summary>
        </member>
        <member name="M:PowerMapper.IConvention.Apply(PowerMapper.ConventionContext)">
            <summary>
            Applies the convention to type member mappings.
            </summary>
            <param name="context">The context to apply conventions.</param>
        </member>
        <member name="M:PowerMapper.IConvention.SetReadOnly">
            <summary>
            Sets the convention to be read only.
            </summary>
        </member>
        <member name="T:PowerMapper.MappingMember">
            <summary>
            Represents the member(property or field) metadata of the mapping source or target type.
            </summary>
        </member>
        <member name="P:PowerMapper.MappingMember.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
            <value>The <see cref="T:System.Type"/> object for the class that declares this member.</value>
        </member>
        <member name="P:PowerMapper.MappingMember.MemberName">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:PowerMapper.MappingMember.MemberType">
            <summary>
            Gets the type of value of the member.
            </summary>
            <value>The type of value of the member.</value>
        </member>
        <member name="P:PowerMapper.MappingMember.ClrMember">
            <summary>
            The original CLR reflection member.
            </summary>
        </member>
        <member name="M:PowerMapper.MappingMember.CanRead(System.Boolean)">
            <summary>
            Determines whether the member can be read.
            </summary>
            <param name="includeNonPublic"><c>true</c> if the non public accessor should be included, otherwise <c>false</c>.</param>
            <returns><c>true</c> if the member can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PowerMapper.MappingMember.CanWrite(System.Boolean)">
            <summary>
            Determines whether the member can be written.
            </summary>
            <param name="includeNonPublic"><c>true</c> if the non public accessor should be included, otherwise <c>false</c>.</param>
            <returns><c>true</c> if the member can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PowerMapper.MappingMemberCollection">
            <summary>
            Represents a collection of member objects that inherit from <see cref="T:PowerMapper.MappingMember"/>.
            </summary>
        </member>
        <member name="P:PowerMapper.MappingMemberCollection.Item(System.String)">
            <summary>
            Gets the member with the specified name.
            </summary>
            <param name="name">The name by which the member is identified.</param>
            <returns>The member with the specified name.</returns>
        </member>
        <member name="M:PowerMapper.MappingMemberCollection.GetMembers(System.String)">
            <summary>
            Gets all the members with the specified name.
            </summary>
            <param name="name">The name by which the member is identified.</param>
            <returns>The members with the specified name.</returns>
        </member>
        <member name="M:PowerMapper.MappingMemberCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:PowerMapper.MatchNameConvention">
            <summary>
            The convention to match mapping member names with options.
            </summary>
        </member>
        <member name="P:PowerMapper.MatchNameConvention.Options">
            <summary>
            Gets or sets the options for member matching algorithm.
            </summary>
            <value>
            The options for member matching algorithm.
            </value>
        </member>
        <member name="M:PowerMapper.MatchNameConvention.Apply(PowerMapper.ConventionContext)">
            <summary>
            Applies the convention to type member mappings.
            </summary>
            <param name="context">The context to apply conventions.</param>
        </member>
        <member name="T:PowerMapper.MemberMapping">
            <summary>
            Represents the mapping strategy between the source member and the target member.
            </summary>
        </member>
        <member name="P:PowerMapper.MemberMapping.SourceMember">
            <summary>
            Gets the source member of the mapping strategy.
            </summary>
        </member>
        <member name="P:PowerMapper.MemberMapping.TargetMember">
            <summary>
            Gets the target member of the mapping strategy.
            </summary>
        </member>
        <member name="M:PowerMapper.MemberMapping.ConvertWith``2(System.Func{``0,``1})">
            <summary>
            Specify a callback function to convert the value of source member to the target member.
            </summary>
            <typeparam name="TSource">The type of the source member.</typeparam>
            <typeparam name="TTarget">The type of the target member.</typeparam>
            <param name="converter">The callback function to convert value.</param>
        </member>
        <member name="T:PowerMapper.MemberMappingCollection">
            <summary>
            Represents a collection of member mapping strategies.
            </summary>
        </member>
        <member name="M:PowerMapper.MemberMappingCollection.Set(PowerMapper.MappingMember,PowerMapper.MappingMember)">
            <summary>
            Specify the member mapping strategy with the source and target members.
            </summary>
            <param name="sourceMember">The source mapping member.</param>
            <param name="targetMember">The target mapping member.</param>
            <returns>The member mapping strategy.</returns>
        </member>
        <member name="M:PowerMapper.MemberMappingCollection.Ignore(PowerMapper.MappingMember)">
            <summary>
            Ignore the specified member during mapping.
            </summary>
            <param name="targetMember">The target member to ignore during mapping.</param>
        </member>
        <member name="M:PowerMapper.MemberMappingCollection.Ignore(System.String)">
            <summary>
            Ignore the specified member during mapping.
            </summary>
            <param name="memberName">The member name to ignore during mapping.</param>
        </member>
        <member name="M:PowerMapper.MemberMappingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:PowerMapper.IMappingContainer">
            <summary>
            Interface defining the behavior of the converting and mapping container.
            </summary>
        </member>
        <member name="M:PowerMapper.IMappingContainer.Map``2(``0)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.IMappingContainer.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
        </member>
        <member name="M:PowerMapper.IMappingContainer.GetMapper``2">
            <summary>
            Returns a mapper instance for specified types.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <returns>A mapper instance for specified types.</returns>
        </member>
        <member name="M:PowerMapper.IMappingContainer.Configure``2">
            <summary>
            Returns a type mapping instance of specified types for the configuration purpose.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>A type mapping instance of specified types for the configuration purpose.</returns>
        </member>
        <member name="P:PowerMapper.IMappingContainer.Conventions">
            <summary>
            Gets a <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.
            </summary>
            <value>A <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.</value>
        </member>
        <member name="M:PowerMapper.IMappingContainer.RegisterConverter``2(System.Func{``0,``1})">
            <summary>
            Registers a custom converter to the <see cref="T:PowerMapper.IMappingContainer"/> instance.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="expression">Callback to convert from source type to the target type.</param>
        </member>
        <member name="T:PowerMapper.Mapper">
            <summary>
            The convenient entry point of the <see cref="T:PowerMapper.MappingContainer"/>.
            </summary>
        </member>
        <member name="P:PowerMapper.Mapper.Default">
            <summary>
            Gets the default object mapper container.
            </summary>
        </member>
        <member name="M:PowerMapper.Mapper.CreateContainer">
            <summary>
            Create a new instance of <see cref="T:PowerMapper.IMappingContainer"/>.
            </summary>
            <returns>A new instance of <see cref="T:PowerMapper.IMappingContainer"/>.</returns>
        </member>
        <member name="P:PowerMapper.Mapper.Conventions">
            <summary>
            Gets a <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.
            </summary>
            <value>A <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.</value>
        </member>
        <member name="M:PowerMapper.Mapper.RegisterConverter``2(System.Func{``0,``1})">
            <summary>
            Registers a custom converter to the <see cref="T:PowerMapper.MappingContainer"/> instance.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="expression">Callback to convert from source type to the target type.</param>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(``0)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``1(System.Object)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
        </member>
        <member name="M:PowerMapper.Mapper.Map(System.Object,System.Object)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(``0[])">
            <summary>
            Execute a mapping from the source array of <typeparamref name="TSource"/> to a new destination array of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source array.</typeparam>
            <typeparam name="TTarget">The element type of the target array.</typeparam>
            <param name="sources">The source array to map from.</param>
            <returns>The mapped target array.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Execute a mapping from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a new destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The element type of the source.</typeparam>
            <typeparam name="TTarget">The element type of the target.</typeparam>
            <param name="sources">The source to map from.</param>
            <returns>The mapped target instance.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(System.Collections.Generic.ICollection{``0})">
            <summary>
            Execute a mapping from the source collection of <typeparamref name="TSource"/> to a new destination collection of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source collection.</typeparam>
            <typeparam name="TTarget">The element type of the target collection.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target collection.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(System.Collections.Generic.IList{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Map``2(System.Collections.Generic.List{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.GetMapper``2">
            <summary>
            Returns a mapper instance for specified types.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <returns>A mapper instance for specified types.</returns>
        </member>
        <member name="M:PowerMapper.Mapper.Configure``2">
            <summary>
            Returns a type mapping instance of specified types for the configuration purpose.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>A type mapping instance of specified types for the configuration purpose.</returns>
        </member>
        <member name="T:PowerMapper.IInstanceMapper`2">
            <summary>
            The instance mapping execution strategy.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
        </member>
        <member name="M:PowerMapper.IInstanceMapper`2.Map(`0)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <param name="source">Source object to map from</param>
            <returns>Mapped target object</returns>
        </member>
        <member name="M:PowerMapper.IInstanceMapper`2.Map(`0,`1)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <param name="source">Source object to map from</param>
            <param name="target">Target object to map into</param>
        </member>
        <member name="T:PowerMapper.InstanceMapperExtensions">
            <summary>
            Extension methods for the <see cref="T:PowerMapper.IInstanceMapper`2"/>.
            </summary>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Execute a mapping from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a new destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The element type of the source.</typeparam>
            <typeparam name="TTarget">The element type of the target.</typeparam>
            <param name="mapper">The instance mapping execution strategy.</param>
            <param name="sources">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to map from.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},System.Collections.Generic.ICollection{``0})">
            <summary>
            Execute a mapping from the source collection of <typeparamref name="TSource"/> to a new destination collection of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source collection.</typeparam>
            <typeparam name="TTarget">The element type of the target collection.</typeparam>
            <param name="mapper">The instance mapping execution strategy.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="mapper">The instance mapping execution strategy.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},``0[])">
            <summary>
            Execute a mapping from the source array of <typeparamref name="TSource"/> to a new destination array of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source array.</typeparam>
            <typeparam name="TTarget">The element type of the target array.</typeparam>
            <param name="sources">The source array to map from.</param>
            <param name="mapper">The instance mapping execution strategy.</param>
            <returns>The mapped target array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},System.Collections.Generic.List{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="mapper">The instance mapping execution strategy.</param>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.InstanceMapperExtensions.Map``2(PowerMapper.IInstanceMapper{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Execute a mapping from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the existing destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The element type of the source array.</typeparam>
            <typeparam name="TTarget">The element type of the target array.</typeparam>
            <param name="sources">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to map from.</param>
            <param name="targets">The target <see cref="T:System.Collections.Generic.IEnumerable`1"/> to map to.</param>
            <param name="mapper">The instance mapping execution strategy.</param>
        </member>
        <member name="T:PowerMapper.MemberMapOptions">
            <summary>
            Specify options that control the member matching algorithm.
            </summary>
        </member>
        <member name="F:PowerMapper.MemberMapOptions.Default">
            <summary>
            The default strategy for member matching algorithm.
            </summary>
        </member>
        <member name="F:PowerMapper.MemberMapOptions.IgnoreCase">
            <summary>
            Specifies that the case of the member name should not be considered when matching.
            </summary>
        </member>
        <member name="F:PowerMapper.MemberMapOptions.NonPublic">
            <summary>
            Specifies that non-public members are to be included in the matching algorithm.
            </summary>
        </member>
        <member name="F:PowerMapper.MemberMapOptions.Hierarchy">
            <summary>
            Specifies that non-primitive members are to be included in the matching algorithm.
            </summary>
        </member>
        <member name="T:PowerMapper.ITypeMapper`2">
            <summary>
            Mapping configuration options
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.WithOptions(PowerMapper.MemberMapOptions)">
            <summary>
            Specify options for the member mapping algorithm.
            </summary>
            <param name="options">The options for the member mapping algorithm.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.MapWith(System.Action{`0,`1})">
            <summary>
            Skip member mapping and use a custom function to map to the target type.
            </summary>
            <param name="expression">Callback to map from source type to target type.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.CreateWith(System.Func{`0,`1})">
            <summary>
            Supply a custom instantiation function for the target type.
            </summary>
            <param name="expression">Callback to create the target type given the source object.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.MapMember``1(System.String,System.Func{`0,``0})">
            <summary>
            Skip specified convention member mapping and use a custom function to map to the target member.
            </summary>
            <typeparam name="TMember">The type of the target member.</typeparam>
            <param name="targetMember">The name of the target member.</param>
            <param name="expression">Callback to map from source type to the target member</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.Ignore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ignore the members during mapping.
            </summary>
            <param name="members">The member names to ignore during mapping.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.BeforeMap(System.Action{`0,`1})">
            <summary>
            Execute a custom function to the source and/or destination types before member mapping
            </summary>
            <param name="expression">Callback for the source/destination types</param>
            <returns>Itself</returns>
        </member>
        <member name="M:PowerMapper.ITypeMapper`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Execute a custom function to the source and/or destination types after member mapping
            </summary>
            <param name="expression">Callback for the source/destination types</param>
            <returns>Itself</returns>
        </member>
        <member name="T:PowerMapper.TypeMapperExtensions">
            <summary>
            Extension class that adds a set of convenience overloads to the <see cref="T:PowerMapper.ITypeMapper`2"/> class.
            </summary>
        </member>
        <member name="M:PowerMapper.TypeMapperExtensions.Ignore``3(PowerMapper.ITypeMapper{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Ignore the specified member during mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <typeparam name="TMember">The type of the member to ignore during mapping of the target.</typeparam>
            <param name="typeMapper">The type mapping strategy.</param>
            <param name="expression">The expression of the target member to ignore during mapping.</param>
            <returns>The type mapping strategy.</returns>
        </member>
        <member name="M:PowerMapper.TypeMapperExtensions.Ignore``2(PowerMapper.ITypeMapper{``0,``1},System.String[])">
            <summary>
            Ignore the members during mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="typeMapper">The type mapping strategy.</param>
            <param name="members">The member names to ignore during mapping.</param>
            <returns>The type mapping strategy.</returns>
        </member>
        <member name="M:PowerMapper.TypeMapperExtensions.MapMember``4(PowerMapper.ITypeMapper{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``0,``3})">
            <summary>
            Skip specified convention member mapping and use a custom function to map to the target member.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <typeparam name="TSourceMember">The type of the member to map to of the source.</typeparam>
            <typeparam name="TTargetMember">The type of the member to map to of the target.</typeparam>
            <param name="typeMapper">The type mapping strategy.</param>
            <param name="targetMember">The expression of the target member to map to.</param>
            <param name="expression">Callback to map from source type to the target member</param>
            <returns>The type mapping strategy.</returns>
        </member>
        <member name="T:PowerMapper.MappingContainer">
            <summary>
            Main entry point for the object mapper component.
            </summary>
        </member>
        <member name="M:PowerMapper.MappingContainer.#ctor">
            <summary>
            Create new instance of <see cref="T:PowerMapper.MappingContainer"/>.
            </summary>
        </member>
        <member name="P:PowerMapper.MappingContainer.Conventions">
            <summary>
            Gets a <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.
            </summary>
            <value>A <see cref="T:PowerMapper.ConventionCollection"/> object that used to manage the conventions.</value>
        </member>
        <member name="M:PowerMapper.MappingContainer.RegisterConverter``2(System.Func{``0,``1})">
            <summary>
            Registers a custom converter to the <see cref="T:PowerMapper.MappingContainer"/> instance.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="expression">Callback to convert from source type to the target type.</param>
        </member>
        <member name="M:PowerMapper.MappingContainer.Map``2(``0)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.MappingContainer.Map``2(System.Collections.Generic.List{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.MappingContainer.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
        </member>
        <member name="M:PowerMapper.MappingContainer.GetMapper``2">
            <summary>
            Returns a mapper instance for specified types.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <returns>A mapper instance for specified types.</returns>
        </member>
        <member name="M:PowerMapper.MappingContainer.Configure``2">
            <summary>
            Returns a type mapping instance of specified types for the configuration purpose.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>A type mapping instance of specified types for the configuration purpose.</returns>
        </member>
        <member name="P:PowerMapper.MappingContainer.Converters">
            <summary>
            Gets a <see cref="T:PowerMapper.ValueConverterCollection"/> object that used to register converters.
            </summary>
            <value>A <see cref="T:PowerMapper.ValueConverterCollection"/> object that used to register converters.</value>
        </member>
        <member name="T:PowerMapper.MappingExtensions">
            <summary>
            Extension methods for convenient of the mapping and converting.
            </summary>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``1(System.Object)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(``0)">
            <summary>
            Execute a mapping from the source object to a new target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <returns>Mapped target object.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Execute a mapping from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a new destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The element type of the source.</typeparam>
            <typeparam name="TTarget">The element type of the target.</typeparam>
            <param name="sources">The source to map from.</param>
            <returns>The mapped target instance.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(System.Collections.Generic.ICollection{``0})">
            <summary>
            Execute a mapping from the source collection of <typeparamref name="TSource"/> to a new destination collection of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source collection.</typeparam>
            <typeparam name="TTarget">The element type of the target collection.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target collection.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(System.Collections.Generic.IList{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(System.Collections.Generic.List{``0})">
            <summary>
            Execute a mapping from the source list of <typeparamref name="TSource"/> to a new destination list of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TTarget">The element type of the target list.</typeparam>
            <param name="sources">The source collection to map from.</param>
            <returns>The mapped target list.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(``0[])">
            <summary>
            Execute a mapping from the source array of <typeparamref name="TSource"/> to a new destination array of <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The element type of the source array.</typeparam>
            <typeparam name="TTarget">The element type of the target array.</typeparam>
            <param name="sources">The source array to map from.</param>
            <returns>The mapped target array.</returns>
        </member>
        <member name="M:PowerMapper.MappingExtensions.MapTo``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing target object.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <typeparam name="TTarget">The type of target object.</typeparam>
            <param name="source">Source object to map from.</param>
            <param name="target">Target object to map into.</param>
        </member>
        <member name="T:PowerMapper.StringHelper">
            <summary>
            Utility methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:PowerMapper.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is <c>null</c>, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns><c>true</c> if the value parameter is null or <see cref="F:System.String.Empty"/>, or if <paramref name="value"/> consists exclusively of white-space characters.</returns>
        </member>
        <member name="T:PowerMapper.Strings">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Argument_CannotNullOrEmpty">
            <summary>
              查找类似 The argument value cannot be null or empty string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Collection_ReadOnly">
            <summary>
              查找类似 The collection is read-only. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Convention_ReadOnly">
            <summary>
              查找类似 The convention is read-only. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Converter_AmbiguousTypes">
            <summary>
              查找类似 The type &apos;{0}&apos; is ambiguous: it could come from assembly &apos;{1}&apos; or from assembly &apos;{2}&apos;. Please specify the assembly explicitly in the type name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Converter_CannotFindType">
            <summary>
              查找类似 Cannot find the type &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Converter_InvalidSourceType">
            <summary>
              查找类似 The source type of the converter is {0}, which does not match the type of the source member: {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Converter_InvalidTargetType">
            <summary>
              查找类似 The target type of the converter is {0}, which does not match the type of the target member: {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Creator_CannotFindConstructor">
            <summary>
              查找类似 Type &apos;{0}&apos; does not have a parameterless constructor. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.Emit_InvalidCastType">
            <summary>
              查找类似 Cannot cast from type &apos;{0}&apos; to type &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.InvalidLambdaExpression">
            <summary>
              查找类似 The lambda expression must be property or field access expression. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.TypeMapper_Initialized">
            <summary>
              查找类似 The type mapper has been initialized. Please configure options before the other configurations. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.TypeMapper_MemberNameCannotNullOrEmpty">
            <summary>
              查找类似 The name of the target member cannot be null or empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:PowerMapper.Strings.TypeMapper_ReadOnly">
            <summary>
              查找类似 The type mapper is read-only. 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
