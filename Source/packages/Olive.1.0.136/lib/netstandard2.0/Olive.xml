<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Olive</name>
    </assembly>
    <members>
        <member name="T:Olive.OliveExtensions">
            <summary>
            Provides extensions methods to Standard .NET types.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.NullIfDefault``1(``0,``0)">
            <summary>
            Returns a nullable value wrapper object if this value is the default for its type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WebsiteRoot(System.AppDomain)">
            <summary>
            Returns a DirectoryInfo object of the Website root directory.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetBaseDirectory(System.AppDomain)">
            <summary>
            Returns DirectoryInfo object of the base directory.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.LoadAssembly(System.AppDomain,System.String)">
            <summary>
            loads an assembly given its name.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FilterIf``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            If a specified condition is true, then the filter predicate will be executed.
            Otherwise the original list will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FilterIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            If a specified condition is true, then the filter predicate will be executed.
            Otherwise the original list will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FilterIf``1(System.Threading.Tasks.Task{``0[]},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            If a specified condition is true, then the filter predicate will be executed.
            Otherwise the original list will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WithMin``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Selects the item with minimum of the specified value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WithMax``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Selects the item with maximum of the specified value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FilterIf``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            If a specified condition is true, then the filter predicate will be executed.
            Otherwise the original list will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RunSync(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a specified task synchronously.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.RunSync``1(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a specified task synchronously.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.RiskDeadlockAndAwaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            It's recommended to use Task.Factory.RunSync() instead.
            If you can't, at then call this while making it explicit that you know what you're doing.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.GetAlreadyCompletedResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            If the task is not completed already it throws an exception warning you to await the task.
            If the task wraps an exception, the wrapped exception will be thrown.
            Otherwise the result will be returned.
            Use this instead of calling the Result property when you know that the result is ready to avoid deadlocks.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WaitAndThrow(System.Threading.Tasks.Task)">
            <summary>
            Waits for a task to complete, and then if it contains an exception, it will be thrown.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AsTask``2(System.Threading.Tasks.Task{``0})">
            <summary>
            Casts the result type of the input task as if it were covariant.
            </summary>
            <typeparam name="TOriginal">The original result type of the task</typeparam>
            <typeparam name="TTarget">The covariant type to return</typeparam>
            <param name="this">The target task to cast</param>
        </member>
        <member name="M:Olive.OliveExtensions.ForLinq``1(System.Threading.Tasks.Task{``0[]})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Collections.Generic.IList{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.Get``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            A shorter more readable alternative to ContinueWith().
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Get``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            A shorter more readable alternative to nested ContinueWith() methods.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            A shorter more readable alternative to nested ContinueWith() methods.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ResultOrDefault``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits this task. If the result was an exception,
            it will return the default value of TResult rather than throwing the exception.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.Boolean},System.String)">
            <summary>
            Converts the value of a boolean object to its equivalent string representation for the specified custom text instead of the default "True" or "False".
            </summary>
            <param name="format">The output format string</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToYesNoString(System.Boolean,System.String,System.String)">
            <summary>
            Returns Yes or No depending on whether the result is true of false.
            </summary>
            <param name="yes">The output string if this value is True. the default value is Yes.</param>
            <param name="no">The output string if this value is False.. the default value is No.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToYesNoString(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Returns Yes or No depending on whether the result is true of false.
            </summary>
            <param name="yes">The output string if this value is True. the default value is Yes.</param>
            <param name="no">The output string if this value is False.. the default value is No.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Compares two Boolean object and returns 0 if both are equal.
            </summary>
            <param name="another">It compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CastTo``1(System.Data.DataTable)">
            <summary>
            Casts this data table's records into a list of typed objects.        
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CastTo``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            </summary>
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
        </member>
        <member name="M:Olive.OliveExtensions.CastAsDictionary``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            </summary>
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
        </member>
        <member name="M:Olive.OliveExtensions.ParseObject``1(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Func{System.String,System.Object}})">
            <summary>
            Creates an object of the specified type with the specified data and property mappings.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToCSV(System.Data.DataTable)">
            <summary>
            Gets the CSV data equivalent to this data table.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetRows(System.Data.DataTable)">
            <summary>
            Gets the rows of this data table in a LINQ-able format..
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns a DataTable with columns based on the public properties of type T and the rows
            populated with the values in those properties for each item in this IEnumerable.
            </summary>
            <param name="tableName">Optional name for the DataTable (defaults to the plural of the name of type T).</param>
        </member>
        <member name="M:Olive.OliveExtensions.FieldIndex(System.Data.IDataReader,System.String)">
            <summary>
            Returns the ordinal number of the field which is declared in name parameter in the DataReader object.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="F:Olive.OliveExtensions.EarlyMayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Early May Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.SpringBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Spring Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.LateSummerBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.AdditionalBankHolidays">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsEnglishHoliday(System.DateTime)">
            <summary>
            Determines if a specified date is an English national holiday or weekend.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAdditionalBankHoliday(System.DateTime)">
            <summary>
            Check if Date it is Additional bank holiday in that year
            </summary>
            <param name="date">the date to check</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetUpcoming(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the first upcoming specified week day.
            </summary>
            <param name="dayOfWeek">The number of day of week(0 to 6)</param>
            <param name="skipToday">If skipToday is true, method starts from tomorrow.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetLast(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the last occurance of the specified week day.
            </summary>
            <param name="dayOfWeek">The number of day of week(0 to 6)</param>
            <param name="skipToday">If skipToday is true, the method does not contain Today.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetEarlyMayBankHoliday(System.Int32)">
            <summary>
            Get Early May Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetSpringBankHoliday(System.Int32)">
            <summary>
            Get Spring Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetLateSummerBankHoliday(System.Int32)">
            <summary>
            Get Late Summer Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetBoxingDay(System.Int32)">
            <summary>
            Get Boxing Day Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsOlderThan(System.DateTime,System.TimeSpan)">
            <summary>
            Determines whether this value is before than TimeSpan parameter
            </summary>
            <param name="span">Is a TimeSpan which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsNewerThan(System.DateTime,System.TimeSpan)">
            <summary>
            Determines whether this value is after than TimeSpan parameter
            </summary>
            <param name="span">Is a TimeSpan which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsAfterOrEqualTo(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this value is equal or after than TimeSpan parameter
            </summary>
            <param name="otherDate">Is a date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsBeforeOrEqualTo(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this value is equal or before than TimeSpan parameter
            </summary>
            <param name="otherDate">Is a TimeSpan which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsInSameWeek(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same week (Monday to Sunday) as the specified other date.
            </summary>
            <param name="other">Is a date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsInSameMonth(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same month as the specified other date.
            </summary>
            <param name="other">Is a date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.DaysInYear(System.DateTime)">
            <summary>
            Gets the number of days in this year.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Gets the number of days in this month.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetBeginningOfWeek(System.DateTime)">
            <summary>
            Gets the mid-night of Monday of this week.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetEndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets one tick before the start of next week.
            </summary>
            <param name="startOfWeek">The day of week which you want to set the first day of week. Default is Monday.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetBeginningOfMonth(System.DateTime)">
            <summary>
            Gets the mid-night of the first day of this month.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.EndOfDay(System.DateTime)">
            <summary>
            Gets the end of this day (one tick before the next day).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.EndOfDay(System.Nullable{System.DateTime})">
            <summary>
            Gets the end of this day (one tick before the next day).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsInTheFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsTodayOrFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsToday(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsInThePast(System.DateTime)">
            <summary>
            Determines whether this date is in the past. It returns true if the the date is smaller than LocalTime.Today.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this date is greater than another one. It returns true if this date is greater.
            </summary>
            <param name="otherDate">Compared by this date</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this date is smaller than another one. It returns true if this date is smaller.
            </summary>
            <param name="otherDate">Compared by this date</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToSmallTime(System.DateTime)">
            <summary>
            It shows the time as hh:mm AM or hh:mm PM. E.g. 4am or 6:30pm.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsWeekend(System.DateTime)">
            <summary>
            Determines whether this date is weekend. It returns true if this date is Saturday or Sunday.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AddWorkingDays(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Gets the specific working day after this date.
            </summary>
            <param name="days">Added the value of this parameter to this date</param>
            <param name="considerEnglishBankHolidays">determines whether English Bank Holidays are considered</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToTimeDifferenceString(System.Nullable{System.DateTime},System.Int32,System.Boolean)">
            <summary>
            Gets the difference day and time between this date and now.
            </summary>
            <param name="precisionParts">Determines the number of output parts</param>
            <param name="longForm">determines whether the abstractions of Hours, Minutes or Seconds are shown</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToTimeDifferenceString(System.DateTime)">
            <summary>
            Gets the difference day and time between this date and now.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToTimeDifferenceString(System.DateTime,System.Boolean)">
            <summary>
            Gets the difference day and time between this date and now.
            </summary>
            <param name="longForm">determines whether the abstractions of Hours, Minutes or Seconds are shown</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToTimeDifferenceString(System.DateTime,System.Int32)">
            <summary>
            Gets the difference day and time between this date and now.
            </summary>
            <param name="precisionParts">Determines the number of output parts</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToTimeDifferenceString(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Gets the difference day and time between this date and now.
            </summary>
            <param name="precisionParts">Determines the number of output parts</param>
            <param name="longForm">determines whether the abstractions of Hours, Minutes or Seconds are shown</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets this value as string of date.
            </summary>
            <param name="format">Set the output format</param>
        </member>
        <member name="M:Olive.OliveExtensions.NextWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the next working day.
            </summary>
            <param name="considerEnglishBankHolidays">determines whether English Bank Holidays are considered</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetDaysInBetween(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the days between this day and the specified other day.
            It will remove TIME information. 
            </summary>
            <param name="other">Determines whether English Bank Holidays are considered</param>
            <param name="inclusive">determines whether the result has the first and last days.</param>
        </member>
        <member name="M:Olive.OliveExtensions.PreviousWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the previous working day.
            </summary>
            <param name="considerEnglishBankHolidays">determines whether English Bank Holidays are considered</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToFriendlyDateString(System.DateTime)">
            <summary>
            Gets useful and readable format of the date.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Determines whether this date is between two sepcified dates.
            </summary>
            <param name="from">The date which determines the begin of period.</param>
            <param name="to">The date which determines the end of period</param>
            <param name="includingEdges">Determines whether from and to parameters included in period</param>
        </member>
        <member name="M:Olive.OliveExtensions.CalculateTotalWorkingHours(System.DateTime,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Calculates the total working times in the specified duration which are between the two specified day-hours.
            This can be used to calculate working hours in a particular duration.
            </summary>
            <param name="period">determines the TimeSpan of the period</param>
            <param name="workingStartTime">determines the begin of the period</param>
            <param name="workingEndTime">determines the end of the period</param>
            <param name="considerEnglishBankHolidays">determines whether English Bank Holidays are considered</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetBeginningOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the beginning of Quarter for this DateTime value (time will be 00:00:00).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetEndOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            Returns the Date of the end of Month for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsLastDayOfMonth(System.DateTime)">
            <summary>
            Determines whether this date is the last day of its month or not.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetLast(System.DateTime,Olive.CalendarMonth,System.Int32)">
            <summary>
            Gets the last date with the specified month and day.
            </summary>
            <param name="month">The number of month which is used in the method.</param>
            <param name="day">The number of day which is used in the method.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetNext(System.DateTime,Olive.CalendarMonth,System.Int32)">
            <summary>
            Gets the next date with the specified month and day.
            </summary>
            <param name="month">The number of month which is used in the method.</param>
            <param name="day">The number of day which is used in the method.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetEndOfYear(System.DateTime)">
            <summary>
            Returns the Date of the end of Year for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Min(System.DateTime,System.DateTime)">
            <summary>
            Gets the minimum value between this date and a specified other date.
            </summary>
            <param name="other">Is the date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Max(System.DateTime,System.DateTime)">
            <summary>
            Gets the maximum value between this date and a specified other date.
            </summary>
            <param name="other">Is the date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of weeks and returns the result.
            </summary>
            <param name="numberofWeeks">the specified number of weeks</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetLast(System.DateTime,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the latest date with the specified day of week and time that is before (or same as) this date.
            </summary>
            <param name="day">the specified number of weeks</param>
            <param name="timeOfDay">the specified number of weeks</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToLocal(System.Nullable{System.DateTime})">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.TimeZoneProvider.
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLocal(System.DateTime)">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.CurrentTimeZone().
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLocal(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.CurrentTimeZone().
            </summary>
            <param name="timeZone">the specified TimeZone</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToUniversal(System.Nullable{System.DateTime})">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToUniversal(System.DateTime)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToUniversal(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
            <param name="sourceTimezone">the specified TimeZone</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundToSecond(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole second.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RoundToMinute(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole minute.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RoundToHour(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole hour.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Round(System.DateTime,System.TimeSpan)">
            <summary>
             Rounds this up to the nearest interval (e.g. second, minute, hour, etc).
            </summary>
            <param name="nearest">Nearest interval or rounding (e.g. second, minute, hour, etc).</param>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             Compare this value with another date parameter.
            </summary>
            <param name="another">The date which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Gets the total number of seconds elapsed since 1st Jan 1970.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Invoke(System.Action,System.Int32,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Invokes the specified action for the specified number of times.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="retries">The number of times to try running the action.</param>
            <param name="waitBeforeRetries">The time to wait before every two retries.</param>
            <param name="onEveryError">The action to run every time the method invokation fails. You can use this to log the error.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Invoke``1(System.Func{``0},System.Int32,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Invokes the specified function for the specified number of times.
            </summary>
            <param name="function">The function to evaluate.</param>
            <param name="retries">The number of times to try running the action.</param>
            <param name="waitBeforeRetries">The time to wait before every two retries.</param>
            <param name="onEveryError">The action to run every time the method invokation fails. You can use this to log the error.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adds all items from a specified dictionary to this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts this to a KeyValueCollection.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AddFromProperties``1(System.Collections.Generic.Dictionary{System.String,``0},System.Object)">
            <summary>
            Adds the properties of a specified [anonymous] object as items to this dictionary.
            It ignores duplicate entries and null values.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets the keys of this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetAllValues``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Tries to the remove an item with the specified key from this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TryRemoveAt``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Int32)">
            <summary>
            Tries to the remove an item with the specified key from this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetAllValues``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value with the specified key, or null.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Add``2(System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            Adds the specified types pair to this type dictionary.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Converts this key value pair list into a Json object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.DeleteAsync(System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
            <summary>
            If specified as recursive and harshly, then it tries multiple times to delete this directory.        
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.HarshDelete(System.IO.DirectoryInfo)">
            <summary>
            Will try to delete a specified directory by first deleting its sub-folders and files.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyToAsync(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.HasExeContent(System.IO.FileInfo)">
            <summary>
            Determines whether the file's contents start with MZ which is the signature for EXE files.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyToAsync(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyTo(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Copies this file to a specified destination directiry with the original file name.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets a file info with the specified name under this folder. That file does not have to exist already.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets a subdirectory with the specified name. It does not need to exist necessarily.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetOrCreateSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets or creates a subdirectory with the specified name.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetDirectories(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the subdirectory tree of this directory.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.EnsureExists(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory if it doesn't already exist.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Determines whether this folder is empty of any files or sub-directories.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
            <param name="digits">The particular number of fractional digits</param>
        </member>
        <member name="M:Olive.OliveExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
            <param name="digits">The particular number of fractional digits</param>
        </member>
        <member name="M:Olive.OliveExtensions.Truncate(System.Double,System.Int32)">
            <summary>
            In mathematics and computer science, truncation is the term for limiting the number of digits right of the decimal point, by discarding the least significant ones.
            Note that in some cases, truncating would yield the same result as rounding, but truncation does not round up or round down the digits; it merely cuts off at the specified digit.
            </summary>
            <param name="places">Limits the number of digits right of the decimal point</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.Double},System.String)">
            <summary>
            This method will not change the original value, but it will return a formatted string.
            </summary>
            <param name="format">The output format string</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.Decimal},System.String)">
            <summary>
            This method will not change the original value, but it will return a formatted string.
            </summary>
            <param name="format">The output format string</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToShortMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToShortMoneyString(System.Nullable{System.Double})">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToInformalMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToRadians(System.Double)">
            <summary>
            Converts degree into radians.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AsPercentageOf(System.Double,System.Double,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>       
            <param name="total">The number which is used in calculating of percentage.</param>
            <param name="multiplyBy100">Determines whether output is divided by 100 or not.</param>
            <param name="roundTo">Determines whether output is rounded or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AsPercentageOf(System.Decimal,System.Decimal,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>
            <param name="total">The number which is used in calculating</param>
            <param name="multiplyBy100">Determines whether output is divided by 100 or not.</param>
            <param name="roundTo">Determines whether output is rounded or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundUpToNearest(System.Double,System.Double)">
            <summary>
            Rounds up to nearest value.
            </summary>
            <param name="roundIntervals">Determines the number of rounds which can multiply to.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundUpToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds up to nearest value.
            </summary>
            <param name="roundIntervals">Determines the number of rounds which can multiply to.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundDownToNearest(System.Double,System.Double)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
            <param name="roundIntervals">Determines the number of rounds which can multiply to.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundDownToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
            <param name="roundIntervals">Determines the number of rounds which can multiply to.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AlmostEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines if this double value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of double processing in .NET.
            </summary>
            <param name="otherValue">Determines the number which is compared to this value.</param>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AlmostEquals(System.Single,System.Single,System.Single)">
            <summary>
            Determines if this float value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of float processing in .NET.
            </summary>
            <param name="otherValue">Determines the number which is compared to this value.</param>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMax(System.Single,System.Single)">
            <summary>
            Determines the maximum limitation of two values.
            </summary>
            <param name="maxValue">If this value is smaller than {maxValue}, this value is returned, owherwise, {maxvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMin(System.Single,System.Single)">
            <summary>
            Determines the minimum limitation of two values.
            </summary>
            <param name="minValue">If this value is greater than {minValue}, this value is returned, owherwise, {minvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitWithin(System.Single,System.Single,System.Single)">
            <summary>
            Determines the minimum and maximum limitation of two values.
            If this value is between {minValue} and {maxValue}, this value is returned. If this value is smaller than {minvalue}, {minvalue} is returned. If this value is greater than {maxvalue}, {maxvalue} is returned.
            </summary>
            <param name="minValue">Determines the minimum value for comparing.</param>
            <param name="maxValue">Determines the maximum value for comparing.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMax(System.Double,System.Double)">
            <summary>
            Determines the maximum limitation of two values.
            </summary>
            <param name="maxValue">If this value is smaller than {maxValue}, this value is returned, owherwise, {maxvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMin(System.Double,System.Double)">
            <summary>
            Determines the minimum limitation of two values.
            </summary>
            <param name="minValue">If this value is greater than {minValue}, this value is returned, owherwise, {minvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitWithin(System.Double,System.Double,System.Double)">
            <summary>
            Determines the minimum and maximum limitation of two values.
            If this value is between {minValue} and {maxValue}, this value is returned. If this value is smaller than {minvalue}, {minvalue} is returned. If this value is greater than {maxvalue}, {maxvalue} is returned.
            </summary>
            <param name="minValue">Determines the minimum value for comparing.</param>
            <param name="maxValue">Determines the maximum value for comparing.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMax(System.Int32,System.Int32)">
            <summary>
            Determines the maximum limitation of two values.
            </summary>
            <param name="maxValue">If this value is smaller than {maxValue}, this value is returned, owherwise, {maxvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitMin(System.Int32,System.Int32)">
            <summary>
            Determines the minimum limitation of two values.
            </summary>
            <param name="minValue">If this value is greater than {minValue}, this value is returned, owherwise, {minvalue} is returned.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LimitWithin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the minimum and maximum limitation of two values.
            If this value is between {minValue} and {maxValue}, this value is returned. If this value is smaller than {minvalue}, {minvalue} is returned. If this value is greater than {maxvalue}, {maxvalue} is returned.
            </summary>
            <param name="minValue">Determines the minimum value for comparing.</param>
            <param name="maxValue">Determines the maximum value for comparing.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Compare two values and returns 0, 1 or -1. If this value is equal to {othervalue}, it returns 0.
            If this value is greater than {othervalue}, it returns 1. If this value is smaller than {othervalue}, it returns -1.
            </summary>
            <param name="another">Determines the value which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Compare two values and returns 0, 1 or -1. If this value is equal to {othervalue}, it returns 0.
            If this value is greater than {othervalue}, it returns 1. If this value is smaller than {othervalue}, it returns -1.
            </summary>
            <param name="another">Determines the value which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Compare two values and returns 0, 1 or -1. If this value is equal to {othervalue}, it returns 0.
            If this value is greater than {othervalue}, it returns 1. If this value is smaller than {othervalue}, it returns -1.
            </summary>
            <param name="another">Determines the value which is compared with this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetEmbeddedResourceName(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets the embedded resource name for a specified relative file path in the project.
            If the resulting resource name does not exist in this assembly it will throw.
            </summary>
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:Olive.OliveExtensions.ReadEmbeddedResourceAsync(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:Olive.OliveExtensions.ReadEmbeddedTextFileAsync(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:Olive.OliveExtensions.ReadEmbeddedResource(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:Olive.OliveExtensions.ReadEmbeddedTextFile(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToLogText(System.Object)">
            <summary>
            It returns ToString for all objects except DictionaryEntries.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLogString(System.Exception,System.String)">
            <summary>
            Creates a log-string from the Exception.
            The result includes the stacktrace, innerexception et cetera, separated by Environment.NewLine.
            </summary>
            <param name="this">The exception to create the string from.</param>
            <param name="additionalMessage">Additional message to place at the top of the string, maybe be empty or null.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AddData(System.Exception,System.String,System.Object)">
            <summary>
            Adds a piece of data to this exception.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToFullMessage(System.Exception,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a more complete text dump of this exception, than just its text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Is``1(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether this property info is the specified property (in lambda expression).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name for a specified expression.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetPropertyPath(System.Linq.Expressions.Expression)">
            <summary>
            For example if the expression is (x => x.A.B) it will return A.B.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyToAsync(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            Copies this file onto the specified desination path.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllBytesAsync(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            If the file does not exist, it will return an empty byte array.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExistsAsync(System.IO.FileInfo)">
            <summary>
            Returns whether the file exists. If it's null, false will be returned.
            It awaits any other concurrent file operations before checking the file's existence.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllTextAsync(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllTextAsync(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.DeleteAsync(System.IO.FileInfo,System.Boolean)">
            <summary>
            Will try to delete a specified directory by first deleting its sub-folders and files.
            </summary>
            <param name="harshly">If set to true, then it will try multiple times, in case the file is temporarily locked.</param>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content on this file using the Western European Windows Encoding 1252.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content on this file. 
            Note: For backward compatibility, for UTF-8 encoding, it will always add the BOM signature.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Exists(System.IO.DirectoryInfo)">
            <summary>
            Determines whether or not this directory exists.
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Exists(System.IO.FileInfo)">
            <summary>
            Determines whether or not this file exists. 
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSize(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the total size of all files in this directory.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSizeText(System.IO.DirectoryInfo,System.Boolean,System.Int32)">
            <summary>
            Gets the size of this folder in human readable text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSizeText(System.IO.FileInfo,System.Int32)">
            <summary>
            Gets the size of this file in human readable text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToSafeFileName(System.String,System.Char)">
            <summary>
            Detects the characters which are not acceptable in File System and replaces them with a hyphen.
            </summary>
            <param name="replacement">The character with which to replace invalid characters in the name.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Execute(System.IO.FileInfo,System.String,System.Boolean,System.Action{System.Diagnostics.Process})">
            <summary>
            Executes this EXE file and returns the standard output.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type based on the file extension.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetFilesOrEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the files in this folder. If this folder is null or non-existent it will return an empty array.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetExactFullName(System.IO.FileSystemInfo)">
            <summary>
            Gets this file's original exact file name with the correct casing.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExistsOrThrow(System.IO.FileInfo)">
            <summary>
            If this file exists, it will simply return it. 
            Otherwise it will throw a FileNotFoundException with the message of 'File not found: {path}'.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExistsOrThrow(System.IO.DirectoryInfo)">
            <summary>
            If this directory exists, it will simply return it. 
            Otherwise it will throw a DirectoryNotFoundException with the message of 'Directory not found: {path}'.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CopyTo(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            Copies this file onto the specified desination path.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllBytes(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Delete(System.IO.FileInfo,System.Boolean)">
            <summary>
            Will try to delete a specified file if it exists.
            </summary>
            <param name="harshly">If set to true, then it will try multiple times, in case the file is temporarily locked.</param>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content on this file using the Western European Windows Encoding 1252.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content on this file. 
            Note: For backward compatibility, for UTF-8 encoding, it will always add the BOM signature.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AppendAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AppendAllTextAsync(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AppendLine(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GZip(System.Byte[])">
            <summary>
            Compresses this data into Gzip.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.UnGZip(System.Byte[])">
            <summary>
            Decompresses this gzipped data.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GZip(System.String)">
            <summary>
            Compresses this string into Gzip. By default it will use UTF8 encoding.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GZip(System.String,System.Text.Encoding)">
            <summary>
            Compresses this string into Gzip.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Shorten(System.Guid)">
            <summary>
            Shortens this GUID.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetResponseString(System.Net.HttpWebRequest)">
            <summary>
            Gets the response data as string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsUserMessage(System.Net.HttpStatusCode)">
            <summary>
            Determines whether this is in the 400 range.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsError(System.Net.HttpStatusCode)">
            <summary>
            Determines whether this is in the 400 or 500 ranges.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetString(System.Net.WebResponse)">
            <summary>
            Gets the response data as string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetCookieOrChunks(System.Net.CookieCollection,System.String)">
            <summary>
            Gets the cookie or cookie chunks for the specified cookie name.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.PostFormAsync(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Sends a Http Post message.
            </summary>
            <param name="anonymouseObject">Each property in this anonymous object will be sent as a form field.</param>        
        </member>
        <member name="M:Olive.OliveExtensions.PostFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sends a Http Post message.
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.NumberWordsUnits">
            <summary> Static mapping array, used by ToWordString for Units. </summary>
        </member>
        <member name="F:Olive.OliveExtensions.NumberWordsTens">
            <summary> Static mapping array, used by ToWordString for Tens. </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RoundUpToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds up to nearest value with the intervals specified.
            </summary>
            <param name="roundIntervals">The interval value for rounding to the nearest number.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RoundDownToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
            <param name="roundIntervals">The interval value for rounding to the nearest number.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToBase32(System.Int32)">
            <summary>
            Converts this number to a short textual representation.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CompareTo(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Compare two values and returns 0, 1 or -1.
            </summary>
            <param name="another">The integer value that is used for comparing.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.Int32},System.String)">
            <summary>
            This method will not change the original value, but it will return a formatted string.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToWordString(System.Int32)">
            <summary>
            To the word string.
            </summary>
            <remarks>
            Some awesome code from http://stackoverflow.com/questions/2729752/converting-numbers-in-to-words-c-sharp
            </remarks>
        </member>
        <member name="M:Olive.OliveExtensions.ToFileSizeString(System.Int64,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
            <param name="units">Set the unit of this value including B, KB, MB, GB or TB.</param>
            <param name="round">Determines the number of rounding digits.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToFileSizeString(System.Int32,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes. E.g. 4.5MB or 11KB.
            </summary>
            <param name="round">Determines the number of rounding digits.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToFileSizeString(System.Int64,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes.
            </summary>
            <param name="round">Determines the number of rounding digits.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToFileSizeString(System.Int32,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
            <param name="units">Set the unit of this value including B, KB, MB, GB or TB.</param>
            <param name="round">Determines the number of round digits.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AsPercentageOf(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages of the given total.
            </summary>
            <param name="total">Return this value as a percentages the of the given total.</param>
            <param name="multiplyBy100">Multiply this by 100.</param>
            <param name="roundTo">Rounding decimals to.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToOrdinal(System.Int32)">
            <summary>
            E.g. converts 1 to 1st or 13 to 13th.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToGuid(System.Int32)">
            <summary>
            Concerts this integer value to GUID.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets the index of the first item in this list which matches the specified criteria.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets all items of this list except those meeting a specified criteria.
            </summary>
            <param name="criteria">Exclusion criteria</param>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Guid}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified list to the beginning of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Adds the specified item(s) to the beginning of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},Olive.OliveExtensions.ItemHandler{``0})">
            <summary>
            Performs an action for all items within the list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Performs an action for all items within the list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action for all items within the list.
            It will provide the index of the item in the list to the action handler as well.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.DoAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})">
            <summary>
            Performs an action for all items within the list.
            It will provide the index of the item in the list to the action handler as well.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:Olive.OliveExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:Olive.OliveExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:Olive.OliveExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:Olive.OliveExtensions.IsEquivalentTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this list is equivalent to another specified list. Items in the list should be distinct for accurate result.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Counts the number of items in this list matching the specified criteria.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Picks an item from the list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Works as opposite of Contains().
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.LacksAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks any item in the specified list.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.LacksAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks all items in the specified list.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a subset of the items in this collection.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines of this list contains all items of another given list.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list contains any of the specified items.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines if none of the items in this list meet a given criteria.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.HasAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            A null safe alternative to Any(). If the source is null it will return false instead of throwing an exception.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this is null or an empty list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WithMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with maximum of the specified value.
            If this list is empty, NULL (or default of T) will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WithMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with minimum of the specified value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetElementAfter``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element after a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the last in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.GetElementBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element before a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the first in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes a list of items from this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AreItemsUnique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if all items in this collection are unique.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Returns the union of this list with the specified other lists.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns the union of this list with the specified items.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims all elements in this list and excludes all null and "empty string" elements from the list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Lacks(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLinesString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concats all elements in this list with Environment.NewLine.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Chop``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Chops a list into same-size smaller lists. For example:
            new int[] { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }.Chop(5)
            will return: { {1,2,3,4,5}, {6,7,8,9,10}, {11,12,13,14,15}, {16} }
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.TimeSpan})">
            <summary>
            Returns the sum of a timespan selector on this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the indices of all items which matche a specified criteria.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces the specified item in this list with the specified new item.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns all elements of this list except those at the specified indices.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the last X items.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ExceptFirst``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the first X items.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RemoveNulls``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the nulls from this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAtLeast(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Determines whether this least contains at least the specified number of items.
            This can be faster than calling "x.Count() >= N" for complex iterators.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Add``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Adds the specified key/value pair to this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to this set.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.DequeueAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeues all queued items in the right order.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a HashSet of type T (use for performance in place of ToList()).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets all indices of the specified item in this collection.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.OrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty collection if this collection is null.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAnyOf``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is in the specified list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAnyOf(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Determines if this item is in the specified list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAny(System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Guid}[])">
            <summary>
            Specifies whether this list contains any of the specified values.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds the median of a list of integers
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Or``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If this list is null or empty, then the specified alternative will be returned, otherwise this will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Cast(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates a list of the specified runtime type including all items of this collection.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.OrderBy(System.Collections.IEnumerable,System.String)">
            <summary>
            Sorts this list by the specified property name.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FilterIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            If a specified condition is true, then the filter predicate will be executed.
            Otherwise the original list will be returned.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.NextBoolean(System.Random,System.Double)">
            <summary>
            Gets a random boolean value with the specified chance (0-100).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.NextBoolean(System.Random)">
            <summary>
            Gets a random boolean value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.NextAlphaNumericString(System.Random,System.Int32,System.Boolean)">
            <summary>
            Generates and returns a Random alphanumeric string.
            </summary>
            <param name="rng">Random instance.</param>
            <param name="length">Length of string to return</param>
            <param name="omitConfusableCharacters">Pass true to miss-out letters that can be confused with numbers (BDIOS)</param>
            <returns>String instance containing random alphanumeric characters.</returns>
        </member>
        <member name="M:Olive.OliveExtensions.PickNumbers(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns [quantity] number of unique random integers within the given range.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(Olive.Range{System.DateTime},System.String)">
            <summary>
            Returns a formatted string based on this Range&lt;DateTime&gt; object and the given string format.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetIntervals(Olive.Range{System.Double},System.Double)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetIntervals(Olive.Range{System.Decimal},System.Decimal)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.MergeAdjacents(System.Collections.Generic.IEnumerable{Olive.Range{System.DateTime}},System.TimeSpan)">
            <summary>
            Merges adjecant items in this list if their gap is within the specified tolerance.
            The result will be another list of ranges with potentially fewer (but larger) ranges.
            Consider sorting the items before calling this method.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Overlap``1(System.Collections.Generic.IEnumerable{Olive.Range{``0}},System.Boolean)">
            <summary>
            Determines if there is any overlap between any two ranges in this list of ranges.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetIntervals(Olive.Range{System.Int32},System.Int32)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetParentTypes(System.Type)">
            <summary>
            Gets all parent types hierarchy for this type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.InhritsFrom(System.Type,System.Type)">
            <summary>
            Determines whether this type inherits from a specified base type, either directly or indirectly.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetCSharpName(System.Type,System.Boolean)">
            <summary>
            Retuns the name of this type in the same way that is used in C# programming.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateInstanceWithDI(System.Type)">
            <summary>
            Creates the instance of this type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Defines``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether it has a specified attribute applied to it.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type casted to the specified type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsNullable(System.Type)">
            <summary>
            Determines if this type is a nullable of something.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsStatic(System.Type)">
            <summary>
            Determines whether this type is static.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSubTypes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
            Gets all types in this assembly that inherit from a specified base type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetProgrammingName(System.Type)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetProgrammingName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsGenericOf(System.Type,System.Type,System.Type[])">
            <summary>
            Determines if this type is a generic class  of the specified type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FindImplementerClasses(System.Type)">
            <summary>
            Gets all types in the current appDomain which implement this interface.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateNew(System.Threading.Thread,System.Action)">
            <summary>
            Creates a new thread and copies the current Culture and UI Culture.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateNew(System.Threading.Thread,System.Action,System.Action{System.Threading.Thread})">
            <summary>
            Creates a new thread and copies the current Culture and UI Culture.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for this type. It's equivalent to default(T).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            If it specifies DisplayNameAttribute the value from that will be returned.
            Otherwise it returns natural English literal text for the name of this member.
            For example it coverts "ThisIsSomething" to "This is something".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether this property is static.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.SafeGetProperty(System.Type,System.String)">
            <summary>
            Returns an instnce public property with the specified name.
            It avoids AmbiguousMatchFoundException by searching the types one by one.
            </summary> 
        </member>
        <member name="M:Olive.OliveExtensions.GetEnumerableItemType(System.Type)">
            <summary>
            If this type implements IEnumerable«T» it returns typeof(T).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Will set the Position to zero, and then copy all bytes to a memory stream's buffer.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllBytesAsync(System.IO.Stream)">
            <summary>
            Will set the Position to zero, and then copy all bytes to a memory stream's buffer.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads all text in this stream as UTF8.
            </summary>
            <param name="encoding">If not specified (or NULL specified) then UTF8 will be used.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Is``1(System.String)">
            <summary>
            Determines whether this string can be converted to the specified type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TryParseAs``1(System.String)">
            <summary>
            Tries to parse this text to the specified type.
            Returns null if parsing is not possible.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.To``1(System.String)">
            <summary>
            It converts this text to the specified data type. 
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.To(System.String,System.Type)">
            <summary>
            Converts the value of this string object into the specified target type.
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.JsUnsafeCharacters">
            <summary>
            Array of unsafe characters that need to be replaced with their character code literals in a JavaScript string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes the specified text from the start of this string instance.
            </summary>
            <param name="textToTrim">Determines the string which removed if it is occured in start of this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.TrimEnd(System.String,System.Int32)">
            <summary>
            Trims the end of this instance of string with the specified number of characters.
            </summary>
            <param name="numberOfCharacters">The specified number of characters which removed from end of this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.TrimOrNull(System.String)">
            <summary>
            If this string object is null, it will return null. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TrimOrEmpty(System.String)">
            <summary>
            If this string object is null, it will return empty string. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsNoneOf(System.String,System.String[])">
            <summary>
            If this string object is null, it will return empty. Otherwise it will trim the text and return it.
            </summary>
            <param name="items">The list of items which are compared to this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToLowerOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to lower case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToUpperOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to upper case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAnyOf(System.String,System.String[])">
            <summary>
            Determines this value is one of the {Args}.
            </summary>
            <param name="items">The list of items which are compared to this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsAnyOf(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines this value is one of the {Args}.
            </summary>
            <param name="items">The list of items which are compared to this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAll(System.String,System.String[],System.Boolean)">
            <summary>
            If this string have one of the {Args} parameter, it returns true, otherwise it returns false.
            </summary>
            <param name="keywords">The list of items which are checked.</param>
            <param name="caseSensitive">determines whether sensitivity is checked or not. Default value is false.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether this instance of string is null or empty.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.HasValue(System.String)">
            <summary>
            Determines whether this instance of string is not null or empty.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToHtmlLines(System.String)">
            <summary>
            Will replace all line breaks with a BR tag and return the result as a raw html.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToHtmlLines``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Will join all items with a BR tag and return the result as a raw html.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToHtmlLines``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Will join all items with a BR tag and return the result as a raw html.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Or(System.String,System.String)">
            <summary>
            Gets the same string if it is not null or empty. Otherwise it returns the specified default value.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Or(System.String,System.Func{System.String})">
            <summary>
            Gets the same string if it is not null or empty. Otherwise it returns the specified default value.
            </summary>
            <param name="defaultValueProvider">It is returned if this string is Null.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Unless(System.String,System.String)">
            <summary>
            Gets the same string unless it is the same as the specified text. If they are the same, empty string will be returned.
            </summary>
            <param name="unwantedText">The string is used to search in this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Summarize(System.String,System.Int32,System.Boolean)">
            <summary>
            Summarizes the specified source.
            </summary>
            <param name="maximumLength">The number of characters which should be shown. It should be greater than 3 if the enforceMaxLength parameter is true.</param>
            <param name="enforceMaxLength">Determines whether maximumLength parameter should be enforced or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Summarize(System.String,System.Int32)">
            <summary>
            Summarizes the specified text.
            </summary>        
            <param name="maximumLength">The number of characters which should be shown.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns the number of members of this value.
            </summary>        
            <param name="objectTitle">Determines the title of the object.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Returns the number of members of this value.
            </summary>        
            <param name="objectTitle">Determines the title of the object.</param>
            <param name="zeroQualifier">Determines the title when the number of items is zero.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToCountString(System.String,System.Int32)">
            <summary>
            Inserts a "s" in the end of this string if {count} greater than zero.
            </summary>        
            <param name="count">Determines the number of this object.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToCountString(System.String,System.Int32,System.String)">
            <summary>
            Inserts a "s" in the end of this string if {count} greater than zero.
            </summary>        
            <param name="count">Determines the number of this object.</param>
            <param name="zeroQualifier">is a string that if the {count} is zero, it is added to the end of the output string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.SeparateAtUpperCases(System.String)">
            <summary>
            Inserts a space after each uppercase characters in this string.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.ToPlural(System.String)">
            <summary>
            Returns the plural form of this word.
            </summary>        
        </member>
        <member name="M:Olive.OliveExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
            <param name="unnecessaryText">Specific number of characters from this value that you want to be removed.</param>
        </member>
        <member name="M:Olive.OliveExtensions.TrimEnd(System.String,System.String,System.Boolean)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
            <param name="unnecessaryText">Specific number of characters from this value that you want to be removed.</param>
            <param name="caseSensitive">By default it's TRUE.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:Olive.OliveExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the first few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:Olive.OliveExtensions.FormatWith(System.String,System.Object,System.Object[])">
            <summary>
            This method identifies a string literal as an interpolated string.
            </summary>
            <param name="arg">The value which is used in this string.</param>
            <param name="additionalArgs">The list of values which are used in this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.GetLastChar(System.String)">
            <summary>
            Gets the last Char of a string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.StartsWithAny(System.String,System.String[])">
            <summary>
            Gets whether this string item begins with any of the specified items{Args}.
            </summary>
            <param name="listOfBeginnings">The list of strings which are checked whether they are in this value or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Gets whether this string item begins with any of the specified items{Args}.
            </summary>
            <param name="other">The string which is checked whether it is in this value.</param>
            <param name="caseSensitive">The list of strings which are checked whether it is in this value or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.EndsWithAny(System.String,System.String[])">
            <summary>
            Gets whether this string item ends with any of the specified items.
            </summary>
            <param name="listOfEndings">The list of strings which are checked whether they are in this value or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.RemoveHtmlTags(System.String)">
            <summary>
            Removes all Html tags from this html string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AllIndicesOf(System.String,System.String)">
            <summary>
            Gets all indices of a specified string inside this text.
            </summary>
            <param name="pattern">Finds {pattern} into this string and returns Inumerable value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.WithPrefix(System.String,System.String)">
            <summary>
            Returns this text with the specified prefix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WithSuffix(System.String,System.String)">
            <summary>
            Returns this text with the specified suffix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
            <param name="suffix">String which is inserted in the start of this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.WithWrappers(System.String,System.String,System.String)">
            <summary>
            Wraps this text between the left and right wrappers, only if this has a value.
            </summary>
            <param name="left">String which is located left side of this value.</param>
            <param name="right">String which is located right side of this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats this text by the number of times specified.
            </summary>
            <param name="times">The number of times that this value should be repeated.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Repeat(System.String,System.Int32,System.String)">
            <summary>
            Repeats this text by the number of times specified separated with the specified separator.
            </summary>
            <param name="times">String which is located left side of this value.</param>
            <param name="separator">String which is located among all characters of this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Determines if this string value contains a specified substring.
            </summary>
            <param name="subString">String which is checked.</param>
            <param name="caseSensitive">Determined whether case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Remove(System.String,System.String,System.String[])">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
            <param name="firstSubstringsToRemove">String which is removed.</param>
            <param name="otherSubstringsToRemove">A list of Strings which are removed.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Remove(System.String,System.String[])">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
            <param name="substringsToRemove">A list of Strings which are removed.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Remove(System.String,System.String)">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
            <param name="substringToRemove">String which is removed.</param>
        </member>
        <member name="M:Olive.OliveExtensions.KeepReplacing(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of a specified phrase to a substitute, even if the original phrase gets produced again as the result of substitution. Note: It's an expensive call.
            </summary>
            <param name="original">String which is removed.</param>
            <param name="substitute">String which is replaced.</param>
        </member>
        <member name="M:Olive.OliveExtensions.OnlyWhen(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is True, otherwise it returns empty string.
            </summary>
            <param name="condition">The condition which is checked.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Unless(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is False, otherwise it returns empty string.
            </summary>
            <param name="condition">The condition which is checked.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToLines(System.String)">
            <summary>
            Gets the lines of this string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsUpper(System.Char)">
            <summary>
            Indicates whether this character is categorized as an uppercase letter.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsLower(System.Char)">
            <summary>
            Indicates whether this character is categorized as a lowercase letter.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsLetter(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsAnyOf(System.Char,System.Char[])">
            <summary>
            Determines this value is one of the {Args}.
            </summary>
            <param name="characters">The list of characters which are checked.</param>
        </member>
        <member name="M:Olive.OliveExtensions.IsDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as digit.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether this character is categorized as White Space (space, tab, new line, etc.).
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter or digit.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToUpper(System.Char)">
            <summary>
            Converts the value of this character to its uppercase equivalent.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLower(System.Char)">
            <summary>
            Converts the value of this character to its lowercase equivalent.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToStringOrEmpty(System.Object)">
            <summary>
            If this expression is null, returns an empty string. Otherwise, it returns the ToString() of this instance.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Lacks(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether this string object does not contain the specified phrase.
            </summary>
            <param name="phrase">The string which is searched in this value.</param>
            <param name="caseSensitive">Determined whether case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LacksAll(System.String,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
            <param name="phrases">The list of strings which are searched in this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.LacksAll(System.String,System.Boolean,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
            <param name="caseSensitive">Determined whether case sensitive is important or not.</param>
            <param name="phrases">The list of strings which are searched in this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToLiteralFromPascalCase(System.String)">
            <summary>
            Returns natural English literal text for a specified pascal case string value.
            For example it coverts "ThisIsSomething" to "This is something".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToLower(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-lower-case version of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToUpper(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-upper-case version of this list.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetUtf8WithSignatureBytes(System.String)">
            <summary>
            Gets the UTF8-with-signature bytes of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts this array of bytes to a Base64 string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToBytesFromBase64(System.String)">
            <summary>
            Converts this Base64 string to an array of bytes.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts this string to an array of bytes with the given encoding.
            </summary>
            <param name="encoding">The Encoding which is used for this value.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Determines whether this text contains any of the specified keywords.
            If the keywords list contains a null or empty string, it throws an exception. If you wish to ignore those, use .Trim() on your keywords list.
            </summary>
            <param name="keywords">The list of string which are checked.</param>
            <param name="caseSensitive">ِDetermines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Split(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Splits this list of string items by a specified separator into a number of smaller lists of string.
            </summary>
            <param name="separator">ِDetermines separator string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.AsFile(System.String)">
            <summary>
            Converts this path into a file object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AsFile(System.String,System.Boolean)">
            <summary>
            It will search in all environment PATH directories, as well as the current directory, to find this file.
            For example for 'git.exe' it will return `C:\Program Files\Git\bin\git.exe`.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AsUri(System.String)">
            <summary>
            Converts this path into a Uri object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AsDirectory(System.String)">
            <summary>
            Converts this path into a directory object.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.XmlEncode(System.String)">
            <summary>
            Gets the Xml Encoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.XmlDecode(System.String)">
            <summary>
            Gets the Xml Decoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateHash(System.String,System.Object)">
            <summary>
            Creates a hash of a specified clear text with a mix of MD5 and SHA1.
            </summary>
            <param name="salt">Is random data that is used as an additional input to a one-way function that "hashes" data, a password or passphrase.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CreateMD5Hash(System.String,System.Boolean)">
            <summary>
            Creates MD5 hash of this text
            <param name="asHex">Specifies whether a hex-compatible string is expected.</param>
            </summary>
            <param name="asHex">Determines whether MD5 is based on Hex or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.CreateMD5Hash(System.String)">
            <summary>
            Creates MD5 hash of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateSHA1Hash(System.String)">
            <summary>
            Creates SHA1 hash of this text
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateSHA256Hash(System.String)">
            <summary>
            Creates SHA256 hash of this text
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CreateSHA512Hash(System.String)">
            <summary>
            Creates SHA512 hash of this text
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Split(System.String,System.Int32)">
            <summary>
            Splits this string into some IEnumerable strings which have {chunkSize} characters.
            </summary>
            <param name="chunkSize"> The size of chunks. If {chunkSize} is 1, it returns all this string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Substring(System.String,System.Int32,System.String)">
            <summary>
            Gets a piece of this string from specific start to specific end place..
            </summary>
            <param name="fromIndex"> Is an Integer argument that determines substring is started from which character index. The first character of this string is started from Zero.</param>
            <param name="toText"> Is a string that determines the end of the output string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Substring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a piece of this string from specific start to specific end place..
            </summary>
            <param name="fromIndex"> Is an Integer argument that determines substring is started from which character index. The first character of this string is started from Zero.</param>
            <param name="toText"> Is a string that determines the end of the output string.</param>
            <param name="inclusive"> Determines whether the output string contains {from} and {to} strings or not. Default value is false.</param>
        </member>
        <member name="M:Olive.OliveExtensions.Substring(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a piece of this string from specific start to specific end place..
            </summary>
            <param name="fromIndex"> Is an Integer argument that determines substring is started from which character index. The first character of this string is started from Zero.</param>
            <param name="toText"> Is a string that determines the end of the output string.</param>
            <param name="inclusive"> Determines whether the output string contains {from} and {to} strings or not. Default value is false.</param>
            <param name="caseSensitive"> Determines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            Gets a piece of this string from specific start to specific end place.
            </summary>
            <param name="encoding">The Encoding that is base of convert to string.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToJsonText(System.String)">
            <summary>
            Escapes all invalid characters of this string to it's usable as a valid json constant.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToSimplifiedSHA1Hash(System.String)">
            <summary>
            Gets a SHA1 hash of this text where all characters are alpha numeric.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TryParseEnum``1(System.String,System.Nullable{``0})">
            <summary>
            Attempts to Parse this String as the given Enum type.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.OrEmpty(System.String)">
            <summary>
            If it's null, it return empty string. Otherwise it returns this.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetSingleMatchedValueOrDefault(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns the only matched string in the given text using this Regex pattern. 
            Returns null if more than one match found.
            </summary>
            <param name="text">The string that is controlled whether is matched to Regex or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.HasMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if this collection has more than one item.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.XmlEscape(System.String)">
            <summary>
            Returns a string value that can be saved in xml.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.XmlUnescape(System.String)">
            <summary>
            Returns a string value without any xml-escaped characters.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.JavascriptEncode(System.String)">
            <summary>
            Returns valid JavaScript string content with reserved characters replaced by encoded literals.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToPascalCaseId(System.String)">
            <summary>
            Returns valid PascalCase JavaScript or C# string content.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToCamelCaseId(System.String)">
            <summary>
            Returns valid camelCase javaScript or C# string content.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.CapitaliseFirstLetters(System.String)">
            <summary>
            Converts [hello world] to [Hello World].
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.TrimBefore(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Trims all text before the specified search phrase.
            </summary>
            <param name="search">Trims all text before it.</param>
            <param name="caseSensitive">Determines whether the case sensitive is important or not.</param>
            <param name="trimPhrase">If {trimPhrase} is true, only phrases are returned instead of all characters. The defalt value is false.</param>
        </member>
        <member name="M:Olive.OliveExtensions.TrimStart(System.String,System.String,System.Boolean)">
            <summary>
            Removes all leading occurrences of a set of characters specified in this string. 
            The string that remains after all occurrences of characters in this string are removed from the start of the current string.
            </summary>
            <param name="search">It is removed from this value.</param>
            <param name="caseSensitive">Determines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.TrimAfter(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Removes all leading occurrences of a set of characters specified in this string. 
            The string that remains after all occurrences of characters in this string are removed from the start of the current string.
            </summary>
            <param name="phrase">The string which is searched into this value.</param>
            <param name="trimPhrase">If it is true, only phrases are returned instead of all characters. The default value is false.</param>
            <param name="caseSensitive">Determines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.OrNullIfEmpty(System.String)">
            <summary>
            Returns this string. But if it's String.Empty, it returns NULL.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToProperCase(System.String)">
            <summary>
            Capitalises the first letter and lower-cases the rest.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReplaceWholeWord(System.String,System.String,System.String,System.Boolean)">
            <summary>
            It will replace all occurrences of a specified WHOLE WORD and skip occurrences of the word with characters or digits attached to it.
            </summary>
            <param name="word">Determines the string which is removed.</param>
            <param name="replacement">Determines the string which is replaced.</param>
            <param name="caseSensitive">Determines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ContainsWholeWord(System.String,System.String,System.Boolean)">
            <summary>
            Returns if a specified WHOLE WORD is found in this text. It skips occurrences of the word with characters or digits attached to it.
            </summary>
            <param name="word">Determines the string which is searched.</param>
            <param name="caseSensitive">Determines whether the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Boolean,System.String,System.String)">
            <summary>
            Converts the value of a boolean object to its equivalent string representation for the specified custom text instead of the default "True" or "False".
            </summary>
            <param name="trueText">The string which is returned if this value is true.</param>
            <param name="falseText">The string which is returned if this value is false.</param>
        </member>
        <member name="M:Olive.OliveExtensions.ToString(System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Converts the value of a boolean object to its equivalent string representation for the specified custom text instead of the default "True" or "False".
            </summary>
            <param name="trueText">The string which is returned if this value is true.</param>
            <param name="falseText">The string which is returned if this value is false.</param>
            <param name="nullText ">The string which is returned if this value is null.</param>
        </member>
        <member name="M:Olive.OliveExtensions.EnsureStartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object starts with a specified other one.
            If it does not, then it prepends that and return the combined text.
            </summary>
            <param name="expression ">The string which is used for searching.</param>
            <param name="caseSensitive ">Determines which the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.EnsureEndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object ends with a specified other one.
            If it does not, then it appends that and return the combined text.
            </summary>
            <param name="expression ">The string which is used for searching.</param>
            <param name="caseSensitive ">Determines which the case sensitive is important or not.</param>
        </member>
        <member name="M:Olive.OliveExtensions.HtmlEncode(System.String)">
            <summary>
            Gets the Html Encoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.HtmlDecode(System.String)">
            <summary>
            Gets the Html Decoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.UrlEncode(System.String)">
            <summary>
            Gets the Url Encoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.UrlDecode(System.String)">
            <summary>
            Gets the Url Decoded version of this text.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.EscapeCsvValue(System.String)">
            <summary>
            Removes unused characters from the content of a CSV file.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.IsPrivateIp(System.String)">
            <summary>
            Determines if the given ip address is in any of the private IP ranges
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WrapIn(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided text blocks.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.WrapInLines(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided lines of text.
            A line-break will be added to the left element, and another line break will be added before the right element.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ApproxTotalYears(System.TimeSpan)">
            <summary>
            Gets the approximate number of the total years equivalent to this timespan.
            This is not accurate due to unknown leap years in the actual period to which this TimeSpan relates.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToDate(System.TimeSpan)">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToDate(System.Nullable{System.TimeSpan})">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToNaturalTime(System.TimeSpan)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ToNaturalTime(System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Download(System.Uri,System.String,System.Double)">
            <summary>
            Downloads the text in this URL.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.DownloadData(System.Uri,System.String,System.Double)">
            <summary>
            Downloads the data in this URL.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.PostJson(System.Uri,System.Object)">
            <summary>
            Posts the specified object as JSON data to this URL.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Post(System.Uri,System.Object,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Post(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.ReplaceQueryString(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Removes all query string parameters of this Url and instead adds the specified ones.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetQueryString(System.Uri)">
            <summary>
            Gets the query string parameters of this Url.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RemoveEmptyQueryParameters(System.Uri)">
            <summary>
            Removes the specified query string parameter.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RemoveQueryString(System.Uri,System.String)">
            <summary>
            Removes the specified query string parameter.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AddQueryString(System.Uri,System.String,System.String)">
            <summary>
            Adds the specified query string setting to this Url.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.SetQueryString(System.Uri,System.String,System.Object)">
            <summary>
            Properly sets a query string key value in this Uri, returning a new Uri object.
            </summary>
        </member>
        <member name="F:Olive.OliveExtensions.GZipStarter">
            <summary>
            First three bytes of GZip compressed Data
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Post(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All properties of the postData object will be sent as individual FORM parameters to the destination.
            </summary>
            <param name="url">Post url address</param>
            <param name="postData">An anonymous object containing post data.</param>
            <param name="httpClient">HttpClient instance</param>
        </member>
        <member name="M:Olive.OliveExtensions.Post(System.Net.Http.HttpClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.Post(System.Net.Http.HttpClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetElement(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets an Element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetNode(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets a node with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.FindNode(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Finds a node with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets the value of an attribute or inner text of an element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.AddTo``1(``0,System.Xml.Linq.XContainer)">
            <summary>
            Adds this node to a specified container and returns it back to be used as fluent API.
            </summary>
        </member>
        <member name="M:Olive.OliveExtensions.RemoveNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Removes all namespaces from this element.
            </summary>
        </member>
        <member name="P:Olive.Logging.BatchingLoggerOptions.FlushPeriod">
            <summary>
            The period after which logs will be flushed to the store. Default is one second.
            </summary>
        </member>
        <member name="P:Olive.Logging.BatchingLoggerOptions.BackgroundQueueSize">
            <summary>
            Gets or sets the maximum size of the background log message queue or null for no limit.
            After maximum queue size is reached log event sink would start blocking.
            Defaults to <c>null</c>.
            </summary>
        </member>
        <member name="P:Olive.Logging.BatchingLoggerOptions.BatchSize">
            <summary>
            The maximum number of events to include in a single batch. Use null for no limit.
            </summary>
        </member>
        <member name="P:Olive.FileLoggerOptions.FilePrefix">
            <summary>
            Gets or sets the filename prefix to use for log files.
            Defaults to <c>Log-</c>.
            </summary>
        </member>
        <member name="P:Olive.FileLoggerOptions.LogDirectory">
            <summary>
            The directory in which log files will be written, relative to the app process.
            Default to <c>Logs</c>
            </summary> 
        </member>
        <member name="P:Olive.FileLoggerOptions.MaxFileSize">
            <summary>
            Gets or sets a positive value representing the maximum log size in bytes or null for no limit.
            Once the log is full, no more messages will be appended.
            Defaults to <c>50MB</c>.
            </summary>
        </member>
        <member name="P:Olive.FileLoggerOptions.RetainedFiles">
            <summary>
            The maximum number of files to retaine (default: 10).
            </summary>
        </member>
        <member name="M:Olive.Log.For(System.Type)">
            <summary>
            A shortcut to Context.Current.GetService«ILogger»().
            </summary>
        </member>
        <member name="M:Olive.Log.For(System.Object)">
            <summary>
            A shortcut to Context.Current.GetService«ILogger»().
            </summary>
        </member>
        <member name="T:Olive.EventHandlerDisposer">
            <summary>
            Provides a mechanism to prevent event handler dependency memory leaks.
            
            </summary>
        </member>
        <member name="M:Olive.EventHandlerDisposer.DisposeAll">
            <summary>
            Will dispose all registered event handlers and clear them from the list.
            </summary>
        </member>
        <member name="F:Olive.AbstractAsyncEvent.ConcurrentRaisePolicy">
            <summary>
            Determines how concurrent attempts to raise an event should be handled.
            </summary>
        </member>
        <member name="M:Olive.AbstractAsyncEvent.ClearHandlers">
            <summary>Removes all current handlers from this event.</summary>
        </member>
        <member name="M:Olive.AbstractAsyncEvent.AwaitRaiseCompletion">
            <summary>
            Returns a tasks that completes once as soon as this event is fired.
            </summary>
        </member>
        <member name="M:Olive.AsyncEvent`1.HandleWith(System.Action{`0},System.String,System.Int32)">
            <summary>
            The same as Handle. It's added to get past the strange bug in C# for selecting the correct overload of Handle().
            </summary> 
        </member>
        <member name="M:Olive.AsyncEvent`1.RemoveActionHandler(System.Action{`0})">
            <summary>
            The same as RemoveHandler.
            It's added to get past the strange bug in C# for selecting the correct overload of RemoveHandler().
            </summary>
        </member>
        <member name="M:Olive.AsyncEventExtensions.RemoveActionHandler``1(``0,System.Action)">
            <summary>
            The same as RemoveHandler.
            It's added to get past the strange bug in C# for selecting the correct overload of RemoveHandler().
            </summary>
        </member>
        <member name="M:Olive.AsyncEventExtensions.HandleWith``1(``0,System.Action,System.String,System.Int32)">
            <summary>
            The same as Handle. It's added to get past the strange bug in C# for selecting the correct overload of Handle().
            </summary> 
        </member>
        <member name="M:Olive.AsyncEventExtensions.HandleActionOn``1(``0,System.Action,System.String,System.Int32)">
            <summary>
            The same as HandleOn. It's added to get past the strange bug in C# for selecting the correct overload of HandleOn().
            </summary> 
        </member>
        <member name="M:Olive.AsyncEventExtensions.CreateActionHandler``1(``0,System.Action,System.String,System.Int32)">
            <summary>
            Creates an event handler which you can dispose of explicitly if required.
            </summary>
        </member>
        <member name="M:Olive.AsyncEventExtensions.CreateHandler``1(``0,System.Func{System.Threading.Tasks.Task},System.String,System.Int32)">
            <summary>
            Creates an event handler which you can dispose of explicitly if required.
            </summary>
        </member>
        <member name="T:Olive.ConcurrentEventRaisePolicy">
            <summary>
            Determines how concurrent attempts to raise an event should be handled.
            </summary>
        </member>
        <member name="F:Olive.ConcurrentEventRaisePolicy.Ignore">
            <summary>
            A new concurrent attempt to raise this event should be ignored while the previous raise is still running.
            </summary>
        </member>
        <member name="F:Olive.ConcurrentEventRaisePolicy.Queue">
            <summary>
            A new concurrent attempt to raise this event should be queued to run after the previous raise is still running.
            </summary>
        </member>
        <member name="F:Olive.ConcurrentEventRaisePolicy.Parallel">
            <summary>
            A new concurrent attempt to raise this event should run immediately irrespective of any unfinished previous raise.
            </summary>
        </member>
        <member name="T:Olive.AsyncLock">
            <summary> A recursive mutual exclusion lock that to use with async code.</summary>
        </member>
        <member name="M:Olive.CallContext`1.SetData(System.String,`0)">
            <summary> 
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param> 
        </member>
        <member name="M:Olive.CallContext`1.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the current call context/>.
            </summary>        
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name,
            or a default value for <typeparamref name="T"/> if none is found.</returns>
        </member>
        <member name="M:Olive.ConcurrentList`1.AddUnique(`0)">
            <summary>
            Adds an object only if it doesn't already exist in the list.
            </summary> 
        </member>
        <member name="M:Olive.Base32Integer.#ctor(System.Int32)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:Olive.Base32Integer.#ctor(System.String)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:Olive.Base32Integer.ToBase32String(System.Int32)">
            <summary>
            Converts an array of bytes to a Base32-k string.
            </summary>
        </member>
        <member name="M:Olive.Base32Integer.FromBase32String(System.String)">
            <summary>
            Converts a Base32-k string into an array of bytes.
            </summary>        
        </member>
        <member name="M:Olive.CachedValue.Create``1(System.Func{``0})">
            <summary>
            Creates a CachedValue the specified value builder.
            </summary>
        </member>
        <member name="F:Olive.CachedValue`1._Value">
            <summary>
            Stores the underlying value.
            </summary>
        </member>
        <member name="P:Olive.CachedValue`1.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="M:Olive.CachedValue`1.#ctor(`0)">
            <summary>
            Creates a new CachedValue instance.
            </summary>
        </member>
        <member name="M:Olive.CachedValue`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new CachedValue instance with lazy loading support.
            </summary>
            <param name="valueBuilder">The value builder.</param>
        </member>
        <member name="T:Olive.Config">
            <summary> 
            Provides shortcut access to the value specified in web.config (or App.config) under AppSettings or ConnectionStrings.
            </summary>
        </member>
        <member name="M:Olive.Config.GetConnectionString(System.String)">
            <summary>
            Gets the connection string with the specified key.
            <para>The connection strings should store directly under the ConnectionStrings section.</para>
            </summary>
        </member>
        <member name="M:Olive.Config.Bind(System.String,System.Object)">
            <summary>
            Attempts to bind the given object instance to configuration values by matching
            property names against configuration keys recursively.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <param name="instance">The object to bind.</param>
        </member>
        <member name="M:Olive.Config.Bind``1(System.String)">
            <summary>
            Attempts to bind a new instance of given type to configuration values by matching
            property names against configuration keys recursively.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <returns>A new instance of the given generic type.</returns>
        </member>
        <member name="M:Olive.Config.Get(System.String)">
            <summary>
            Gets the requested configuration value, or empty string if none is provided.
            </summary>
        </member>
        <member name="F:Olive.Context.StartedUp">
            <summary>
            Occurs when the StartUp.OnInitializedAsync is completed.
            </summary>
        </member>
        <member name="M:Olive.Context.GetService``1">
            <summary>
            Gets a required service of the specified contract type.
            </summary>
        </member>
        <member name="T:Olive.EscapeGCopAttribute">
            <summary>
            When applied to a method it will skip all GCop warnings for that method (not to be abused).
            It is bad to escape any cop. Always try to avoid using this attribute by fixing your code.
            </summary>
        </member>
        <member name="T:Olive.IDevCommand">
            <summary>
            A command that can be sent to the application during development time.
            </summary>
        </member>
        <member name="P:Olive.IDevCommand.Name">
            <summary>
            Programmatic name of the command.
            </summary>
        </member>
        <member name="P:Olive.IDevCommand.Title">
            <summary>
            A text or title for this command, shown to the developer on the UI.
            </summary>
        </member>
        <member name="M:Olive.IDevCommand.IsEnabled">
            <summary>
            Determines whether this command is usable in the current context.
            </summary>
        </member>
        <member name="M:Olive.IDevCommand.Run">
            <summary>
            Invokes the command.
            After the command execution, if it returns null or empty, the user will be redirected to the http url referrer, or the root of the application.
            Otherwise the returned string value will be rendered in the http response.
            </summary>
        </member>
        <member name="F:Olive.LocalTime.CurrentTimeZone">
            <summary>
            By default provides the current server's timezone.
            You can override this to provide user-specific time-zones or based on any other system setting.
            </summary>
        </member>
        <member name="F:Olive.LocalTime.GlobalNowGetter">
            <summary> 
            If set, it will provide the "Now" value.
            Note: This has lower priority than thread-level overrides. 
            </summary>
        </member>
        <member name="P:Olive.LocalTime.Now">
            <summary>
            Gets the local current date/time of the application.
            <para>By default it equals to System.DateTime.Now.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>var now = LocalTime.Now // which is identical to DateTime.Now</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para> var date = LocalTime.Now; // that sets date to 15th Jan 200 at 6:13.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:Olive.LocalTime.UtcNow">
            <summary>
            Gets the current Universal Time.
            </summary>
        </member>
        <member name="P:Olive.LocalTime.Today">
            <summary>
            Gets the local current date of the application (no time).
            <para>By default it equals to System.DateTime.Today.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>var now = LocalTime.Today // which is identical to DateTime.Today</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para> var date = LocalTime.Today; // that sets date to 15th Jan 200.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:Olive.LocalTime.UtcToday">
            <summary>
            Gets the current Universal Time's date part (without time).
            </summary>
        </member>
        <member name="M:Olive.LocalTime.Set(System.DateTime)">
            <summary>
            Sets the current time of the application.
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para><tab> </tab>//Here any call for LocalTime.Now/Today will return 15th of Jan 2000 (at 6:30).</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:Olive.LocalTime.Set(System.Func{System.DateTime})">
            <summary>
            Sets the current time function of the application.
            </summary>
        </member>
        <member name="M:Olive.LocalTime.RedefineNow(System.Func{System.DateTime})">
            <summary>
            Sets the current time function of the application.
            Note: This has lower priority than thread-level time setting.
            </summary>
        </member>
        <member name="M:Olive.LocalTime.Stop">
            <summary>
            Freezes the time to the current system time.
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Stop())</para>
            <para>{</para>
            <para> // Freezes the time to Datetime.Now.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:Olive.LocalTime.Add(System.TimeSpan)">
            <summary>
            Adds the specified time to the current LocalTime.
            </summary>
        </member>
        <member name="M:Olive.OverriddenApplicationDate.#ctor(System.Func{System.DateTime})">
            <summary>
            Creates a new OverriddenApplicationDate instance.
            </summary>
        </member>
        <member name="T:Olive.PascalCaseIdGenerator">
            <summary>
            Generates an identifier for a given string value.
            </summary>
        </member>
        <member name="T:Olive.ProcessContext`1">
            <summary>
            Provides process context data sharing mechanism to pass arguments and data around execution in a shared pipeline.
            It supports context nesting.
            </summary>
        </member>
        <member name="P:Olive.ProcessContext`1.Data">
            <summary>Gets or sets the Data of this ProcessContext.</summary>
        </member>
        <member name="M:Olive.ProcessContext`1.#ctor(`0)">
            <summary> 
            Creates a new Process Context.
            </summary>
        </member>
        <member name="P:Olive.ProcessContext`1.Current">
            <summary>
            Gets the data of the current context with default key (null).
            </summary>
        </member>
        <member name="M:Olive.ProcessContext`1.#ctor(System.String,`0)">
            <summary>
            Creates a new Process Context with the specified key and data.
            </summary>
        </member>
        <member name="M:Olive.ProcessContext`1.GetCurrent(System.String)">
            <summary>
            Gets the data of the current context with the specified key.
            </summary>
        </member>
        <member name="M:Olive.ProcessContext`1.Dispose">
            <summary>
            Disposes the current process context and switches the actual context to the containing process context.
            </summary>
        </member>
        <member name="T:Olive.ProcessContext">
            <summary>
            Provides a facade for easiper creation of a Process Context.
            </summary>
        </member>
        <member name="M:Olive.ProcessContext.Create``1(``0)">
            <summary>
            Create a process context for the specified object.
            To access the context object, you can use ProcessContext&lt;Your Type&gt;.Current.
            </summary>
        </member>
        <member name="M:Olive.ProcessContext.Create``1(System.String,``0)">
            <summary>
            Create a process context for the specified object with the specified key.
            To access the context object, you can use ProcessContext&lt;Your Type&gt;.GetCurrent(key).
            </summary>
        </member>
        <member name="T:Olive.Range`1">
            <summary>
            Provides a range of values.
            </summary>
        </member>
        <member name="P:Olive.Range`1.From">
            <summary>
            Gets or sets the From of this Range.
            </summary>
        </member>
        <member name="P:Olive.Range`1.To">
            <summary>
            Gets or sets the To of this Range.
            </summary>
        </member>
        <member name="M:Olive.Range`1.#ctor">
            <summary>
            Creates a new Range instance.
            </summary>
        </member>
        <member name="M:Olive.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new Range instance with the specified boundaries.
            </summary>
        </member>
        <member name="M:Olive.Range`1.GetLength">
            <summary>
            Gets the length of this range. For a date range, use the TimeOfDay property of the returned date time.
            </summary>
        </member>
        <member name="M:Olive.Range`1.Lacks(`0,System.Boolean)">
            <summary>
            Determines whether or not this range lacks the given value.
            </summary>
        </member>
        <member name="M:Olive.Range`1.Contains(`0,System.Boolean)">
            <summary>
            Determines whether or not this range cotnains the given value
            </summary>
        </member>
        <member name="M:Olive.Range`1.Contains(Olive.Range{`0})">
            <summary>
            Determines whether or not this range contains with the given range
            </summary>
        </member>
        <member name="M:Olive.Range`1.Intersects(Olive.Range{`0},System.Boolean)">
            <summary>
            Determines whether or not this range intersects with the given range
            </summary>
        </member>
        <member name="M:Olive.Range`1.ToString">
            <summary>
            Returns: {From} - {To}.
            </summary>
        </member>
        <member name="M:Olive.Range`1.ToString(System.String)">
            <summary>
            Returns {From}{rangeSeparator}{To}.
            </summary>
        </member>
        <member name="M:Olive.Range`1.ToString(System.String,System.String)">
            <summary>
            Returns the From and To values formatted by the specified format and then joined together with the specified rangeSeparator.
            </summary>
            <param name="perItemFormat">E.g. {0:dd MM yy}</param>
        </member>
        <member name="T:Olive.RangeCollection`1">
            <summary>
            Provides a collection of ranges to simplify the manipulation of them.
            This class is not thread-safe.
            </summary>
        </member>
        <member name="T:Olive.RouteTemplate">
            <summary>
            Provides processing features for url route patterns.
            </summary>
        </member>
        <member name="M:Olive.RouteTemplate.Merge(System.Object)">
            <summary>
            It will merge the provided route data parameters into the pattern of the template.
            If any parameter in the template is non-optional, and yet a value has not been provided, it will throw an error.
            If any of the provided route data parameters aren't expected in the pattern, then they will be added to the query string.
            </summary>
        </member>
        <member name="M:Olive.RouteTemplate.Merge(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            It will merge the provided route data parameters into the pattern of the template.
            If any parameter in the template is non-optional, and yet a value has not been provided, it will throw an error.
            If any of the provided route data parameters aren't expected in the pattern, then they will be added to the query string.
            </summary>
        </member>
        <member name="T:Olive.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a  shorter string value.
            </summary>
        </member>
        <member name="P:Olive.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:Olive.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="F:Olive.ShortGuid.Empty">
            <summary>
            Equivalent to Guid.Empty.
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.Parse(System.String)">
            <summary>
            Parses a specified text (that is either a normal Guid or a short guid).
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">The encoded guid as a 
            base64 string</param>
        </member>
        <member name="M:Olive.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="M:Olive.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a 
            specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
        </member>
        <member name="M:Olive.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.NewGuid">
            <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.Encode(System.String)">
            <summary>
            Creates a new instance of a Guid using the string value, 
            then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
        </member>
        <member name="M:Olive.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22 
            characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="M:Olive.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:Olive.ShortGuid.op_Equality(Olive.ShortGuid,Olive.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying Guid value.
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.op_Inequality(Olive.ShortGuid,Olive.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the 
            same underlying Guid value.
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.op_Implicit(Olive.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.op_Implicit(Olive.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.op_Implicit(System.String)~Olive.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
        </member>
        <member name="M:Olive.ShortGuid.op_Implicit(System.Guid)~Olive.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid 
            </summary>
        </member>
        <member name="T:Olive.TemporaryFile">
            <summary>
            This class provides a unique file path in a temporary folder (i.e. in the application temp folder
            in the system by default and can be provided in Config of the application through a setting with key "Application.TemporaryFilesPath")
            After this instance is disposed any possibly created file in the path will be deleted physically.
            
            If this class fails to dispose an application event will be added to the projects database.
            </summary>
        </member>
        <member name="M:Olive.TemporaryFile.#ctor">
            <summary>
            Creates a new instance of temporary file. The file will have "dat" extension by default.
            </summary>
        </member>
        <member name="P:Olive.TemporaryFile.FilePath">
            <summary>
            Gets or sets the FilePath of this TemporaryFile.
            </summary>
        </member>
        <member name="M:Olive.TemporaryFile.#ctor(System.String)">
            <summary>
            Creates a new instance of temporary file.
            with the given extension. Extension can either have "." or not
            </summary>
        </member>
        <member name="M:Olive.TemporaryFile.Dispose">
            <summary>
            Disposes this instance of temporary file and deletes the file if provided
            </summary>
        </member>
    </members>
</doc>
